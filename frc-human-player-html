#!/usr/bin/env python3

import json
import os
import os.path
import sys

from frcclient import client
from frcclient.types import levels

cfg = os.environ.get("FRC_APIS_JSON", os.path.expanduser("~/.frc-apis.json"))
udata = {}
if os.path.exists(cfg):
    data = {}
    with open(cfg, "r") as fp:
        data = json.loads(fp.read())
    udata = data.get('auth', {}).get('frc', {})

if udata == {}:
    print("Need to add ~/.frc-apis.json")
    sys.exit(1)


# this just strips off a single top level key in 'data'. It is useful when
# a response to client.get() has a single field, like most frc responses do.
def get_single(data, name="not-given"):
    keys = list(data.keys())
    if len(keys) != 1:
        raise ValueError("data type %s had %d keys: %s", name, len(keys), keys)
    return data[keys[0]]


client = client.client(user=udata['user'], key=udata['key'])

year = "2024"
mylevels = [levels.Quals, levels.Playoff]

result = client.cache(year + "/events")
events = get_single(result, "events")
num_events = len(events)

result = client.cache(year + "/teams")
allteams = {t['teamNumber']:t for t in get_single(result, "teams")}
mics = ['micCenterStage', 'micStageLeft', 'micStageRight']


hplaydata = {}
for team, teamdata in allteams.items():
    hplaydata[team] = {'matches': 0, 'mics': 0, 'spm': 0,
                       'spb': 0,
                       'district': teamdata['districtCode'],
                       'country': teamdata['country'],
                       'name': teamdata['nameShort'].strip(),
                       'state': teamdata['stateProv']}
#import pdb;pdb.set_trace()

#print(f"There are {len(allteams)} teams and {len(events)} events in {year}")

for n, ev in enumerate(events):
    #print(f'{n+1}/{num_events}: Event code {ev["code"]} type={ev["type"]} was ' +
    #      f'week {ev["weekNumber"]} {ev["districtCode"]}/{ev["divisionCode"]}')

    for level in mylevels:
        result = client.cache(f'{year}/scores/{ev["code"]}/{level}')
        scores = get_single(result, "scores")
        scoremn = {s['matchNumber']: s for s in scores}

        result = client.cache(f'{year}/matches/{ev["code"]}', tournamentLevel=level)
        matches = get_single(result, "matches")
        matchmn = {s['matchNumber']: s for s in matches}

        for mnum in sorted(matchmn.keys()):
            if mnum not in matchmn:
                if level != levels.Playoff:
                    print(f'  {ev["districtCode"]}/{level}/{mnum} did not have match')
                continue
            if mnum not in scoremn:
                if level != levels.Playoff:
                    print(f'  {ev["districtCode"]}/{level}/{mnum} did not have score')
                continue
            mmatch = matchmn[mnum]
            mscore = scoremn[mnum]
            red = [t['teamNumber'] for t in mmatch['teams'] if t['station'].startswith("Red")]
            blue = [t['teamNumber'] for t in mmatch['teams'] if t['station'].startswith("Blue")]
            rscores = [s for s in mscore['alliances'] if s['alliance'] == 'Red']
            bscores = [s for s in mscore['alliances'] if s['alliance'] == 'Blue']

            for alliance, mscores in ((red, rscores), (blue, bscores)):
                if len(mscores) == 0:
                    continue
                msc = mscores[0]
                spb = msc['endGameSpotLightBonusPoints']
                miked = [k for k in mics if msc[k]]

                for t in alliance:
                    hplaydata[t]['matches'] = hplaydata[t]['matches'] + 1
                    hplaydata[t]['spb'] = hplaydata[t]['spb'] + spb
                    hplaydata[t]['mics'] = hplaydata[t]['mics'] + len(miked)
                    if spb:
                        hplaydata[t]['spm'] = hplaydata[t]['spm'] + 1

        # endGameSpotLightBonusPoints...
        #import ipdb; ipdb.set_trace()
        #print("   Had %d matches in %s" % (len(matches), level))

hplaydata = {k: v for k, v in hplaydata.items() if v['matches'] != 0}
with open("hplayer.json", "w") as fp:
    fp.write(json.dumps(hplaydata, indent=1))

results = sorted(hplaydata.items(),
                 key=lambda d: (d[1]['spm'] / d[1]['matches'],
                                -d[1]['matches']),
                 reverse=True)

print("""
<!DOCTYPE html>
<html>
  <head>
    <script src="https://code.jquery.com/jquery-3.7.1.js"></script>
    <script src="https://cdn.datatables.net/2.0.3/js/dataTables.js"></script>
    <link href="https://cdn.datatables.net/2.0.3/css/dataTables.dataTables.css" rel="stylesheet" type="text/css" />

    <meta charset=utf-8 />
    <title>Human Expected Points Added</title>
  
<style id="jsbin-css">
body {
  font: 90%/1.45em "Helvetica Neue", HelveticaNeue, Verdana, Arial, Helvetica, sans-serif;
  margin: 0;
  padding: 0;
  color: #333;
  background-color: #fff;
}

</style>
</head>
  <body>
    <div class="container">
""")
#<link href="https://cdn.datatables.net/v/dt/dt-2.0.3/datatables.min.css" rel="stylesheet">
#<script src="https://cdn.datatables.net/v/dt/dt-2.0.3/datatables.min.js"></script>
#<script>
#new DataTable('#humanplayer');
#</script>
#print('<thead><tr><td>team</td><td>bonuses</td><td>mics hit</td>' +
#      '<td>matches w/bonus</td><td>match rate</td><td>mic rate</td>' +
#      '<td>name</td><td>district</td><td>state</td>\n')
print("""
<h1>Human Player EPA</h1>
This table shows information on human player effectiveness.

Columns:
<ul>
 <li>bonuses: The total number of spotlight bonus points received.</li>
 <li>mics hit: The total number of microphones hit</li>
 <li>matches w/bonus: The number of matches that a team had 1 or more spotlight bonuses</li>
 <li>matches: matches played in the season</li>
 <li>match rate: the percent of matches where a team has received a spotlight bonus</li>
 <li>mic rate: the percent of mics that have been hit in the teams matches (assuming 3 notes thrown per match)</li>
</ul>

Data collection is done with tools <a href="https://github.com/smoser-frc/frc-data-apis">here</a>
""")

print('<table id="humanplayer" class="display">')
htr = ('<tr>' + ''.join(
    ['<td>%s</td>' % f for f in ['', "team", "bonuses", "mics hit", "matches w/bonus", "matches",
                                 "match rate", "mic rate", "name", "district", "country", "state/prov"]]) +
    '</tr>')
print('<thead>' + htr + "</thead>")
print("<tbody>")

for n, (t, d) in enumerate(results):
    if n >= 1000:
        break
    rate = 100 * (d["spm"] / d["matches"])
    print("<tr>" + ''.join(
        ["<td>%s</td>" % f for f in [
            '',
            t,
            d['spb'], d['mics'], d['spm'], d['matches'],
            "%0.3f" % rate,
            "%0.3f" % (100 * (d['mics'] / (d['matches'] * 3))),
            d['name'], d['district'], d['country'], d['state'],
            ]]))
print("</tbody>")
print('<tfoot>' + htr + "</tfoot>")
print("</table>")
print("""<div class="container">""")
#$(document).ready( function () {
print("""
  <script>
const table = new DataTable('#humanplayer', {
    lengthMenu: [50, 200, 500, { label: 'All', value: -1 }],
    columnDefs: [
        {
            searchable: false,
            orderable: false,
            targets: 0
        }
    ],
});
 
table
    .on('order.dt search.dt', function () {
        let i = 1;
 
        table
            .cells(null, 0, { search: 'applied', order: 'applied' })
            .every(function (cell) {
                this.data(i++);
            });
    })
    .draw();

</script>
""")
print("</body></html>")

#import pprint; pprint.pprint(results)
